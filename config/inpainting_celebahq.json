{
    "name": "inpainting_celebahq", // experiments name
    "gpu_ids": [0], // gpu ids list, default is single 0
    "seed" : -1, // random seed, seed <0 represents randomization not used 
    "finetune_norm": false, // find the parameters to optimize

    "path": { //set every part file path
        "base_dir": "experiments", // base path for all log except resume_state
        "code": "code", // code backup
        "tb_logger": "tb_logger", // path of tensorboard logger
        "results": "results",
        "checkpoint": "checkpoint",
        "resume_state": "/kaggle/input/o64-137/137" 
        // "resume_state": null // ex: 100, loading .state  and .pth from given epoch and iteration
    },

    "datasets": { // train or test
        "train": { 
            "which_dataset": {  // import designated dataset using arguments 
                "name": ["data.dataset", "InpaintDataset"], // import Dataset() class / function(not recommend) from data.dataset.py (default is [data.dataset.py])
                "args":{ // arguments to initialize dataset
                    "data_root": "/kaggle/working/huface_origin_64/datasets/celebahq/flist/train_64_28000.flist",
                    "data_len": -1,
                    "mask_config": {
                        "mask_mode": "hybrid",
                        "phase": "train"
                    }
                }
            },
            "dataloader":{
                "validation_split": 4, // percent or number
                "args":{ // arguments to initialize train_dataloader
                    "batch_size": 5, // batch size in each gpu
                    "num_workers": 4,
                    "shuffle": true,
                    "pin_memory": true,
                    "drop_last": true
                },
                "val_args":{ // arguments to initialize valid_dataloader, will overwrite the parameters in train_dataloader
                    "batch_size": 2, // batch size in each gpu
                    "num_workers": 4,
                    "shuffle": false,
                    "pin_memory": true,
                    "drop_last": true
                }
            }
        },
        "test": {
            "which_dataset": {
                "name": "InpaintDataset", // import Dataset() class / function(not recommend) from default file
                "args":{
                    "data_root": "/kaggle/working/huface_origin_64/datasets/celebahq/flist/test_64_2000.flist",
                    "mask_config": {
                        "mask_mode": "center",
                        "phase": "test"
                    }
                }
            },
            "dataloader":{
                "args":{
                    "batch_size": 4,
                    "num_workers": 4,
                    "pin_memory": true
                }
            }
        }
    },

    "model": { // networks/metrics/losses/optimizers/lr_schedulers is a list and model is a dict
        "which_model": { // import designated  model(trainer) using arguments
            "name": ["models.model", "Palette"], // import Model() class / function(not recommend) from models.model.py (default is [models.model.py])
            "args": {
                "sample_num": 8, // process of each image
                "task": "inpainting",
                "ema_scheduler": {
                    "ema_start": 1,
                    "ema_iter": 1,
                    "ema_decay": 0.9999
                },
                "optimizers": [
                    { "lr": 5e-5, "weight_decay": 0}
                ]
            }
        }, 
        "which_networks": [ // import designated list of networks using arguments
            {
                "name": ["models.network", "Network"], // import Network() class / function(not recommend) from default file (default is [models/network.py]) 
                "args": { // arguments to initialize network
                    "init_type": "kaiming", // method can be [normal | xavier| xavier_uniform | kaiming | orthogonal], default is kaiming
                    "module_name": "guided_diffusion", // sr3 | guided_diffusion
                    "unet": {
                        "in_channel": 6,
                        "out_channel": 3,
                        "inner_channel": 64,
                        "channel_mults": [
                            1,
                            2,
                            4,
                            8
                        ],
                        "attn_res": [
                            // 32,
                            16
                            // 8
                        ],
                        "num_head_channels": 32,
                        "res_blocks": 2,
                        "dropout": 0.2,
                        "image_size": 64
                    },
                    "beta_schedule": {
                        "train": {
                            "schedule": "linear",
                            "n_timestep": 2000,
                            // "n_timestep": 10, // debug
                            "linear_start": 1e-6,
                            "linear_end": 0.01
                        },
                        "test": {
                            "schedule": "linear",
                            "n_timestep": 1000,
                            "linear_start": 1e-4,
                            "linear_end": 0.09
                        }
                    }
                }
            }
        ],
        "which_losses": [ // import designated list of losses without arguments
            "mse_loss" // import mse_loss() function/class from default file (default is [models/losses.py]), equivalent to { "name": "mse_loss", "args":{}}
        ],
        "which_metrics": [ // import designated list of metrics without arguments
            "mae" // import mae() function/class from default file (default is [models/metrics.py]), equivalent to { "name": "mae", "args":{}}
        ]
    },

    "train": { // arguments for basic training
        "n_epoch": 184, // max epochs, not limited now
        "n_iter": 1e8, // max interations
        "val_epoch": 1, // valdation every specified number of epochs
        "save_checkpoint_epoch": 10,
        "log_iter": 1e3, // log every specified number of iterations
        "tensorboard" : false,  // tensorboardX enable
        "min_val_mae_loss": 0.03637281805276871,
        "min_val_flag": false,
        "train_previous": [0.14171121259800817, 0.027789672578726807, 0.021782605056307948, 0.019008231214445174, 0.01717432176996337, 0.01705713757985126, 0.01631956299413322, 0.01525886429430704, 0.014911388963170232, 0.015312796009932123, 0.014666173716137564, 0.015023428051796864, 0.014228415989146596, 0.014031730404716882, 0.014156775261692359, 0.013596679461026504, 0.014025686048298895, 0.012988203605891122, 0.01354908014273359, 0.013410291934541714, 0.013390143227129102, 0.013094511619571298, 0.013266082957753049, 0.01378767490228019, 0.013023514449733513, 0.013091798636597988, 0.012520347009517246, 0.013182502645144104, 0.012791115157422444, 0.012310485224638125, 0.0126189018205802, 0.012431390231970759, 0.012637104403562891, 0.012934971962694271, 0.012369826651175581, 0.012427216636002148, 0.011961523567636441, 0.012307649117159255, 0.012684616583881743, 0.01245554559044235, 0.012029736655705786, 0.012718673248145195, 0.012281367397479743, 0.012179195398085756, 0.012047356600321607, 0.012119411223466948, 0.01229985302977656, 0.012401257494348346, 0.012151545002816818, 0.01214480952203966, 0.011658414115874512, 0.011730518156733892, 0.012151588771117931, 0.012156171243556472, 0.011993137221831884, 0.012084316435872844, 0.012399906697366514, 0.01196199795464079, 0.01195070420179781, 0.011904221519124864, 0.011787561456869194, 0.011819349459391547, 0.011594868710168236, 0.011769804247472242, 0.01186894406421027, 0.011771509691152586, 0.01183168673000848, 0.011768121016051881, 0.012284577132969978, 0.011834352081090384, 0.011358533112123308, 0.011649697882548276, 0.011864819155048242, 0.011767525784143012, 0.01133485819474492, 0.011764689030907776, 0.011467596309471039, 0.011541657612369067, 0.011576255267405562, 0.011915649379920703, 0.01129377018286261, 0.011412332242008572, 0.011131772906869461, 0.011633726834847657, 0.011224911291142468, 0.011362639869529428, 0.0112518040676582, 0.011294624949263064, 0.011902085279458303, 0.011612061079349784, 0.011670623031367995, 0.011474494256006678, 0.0114116445854912, 0.01128176809122817, 0.0117656768403455, 0.011137642020299819, 0.011459522520187481, 0.011799764998726706, 0.010990398489446614, 0.011326699157412521, 0.010954232167760996, 0.010937221037766018, 0.01095986681051666, 0.011086713490188438, 0.0110344390384003, 0.010697362379458656, 0.011087672714496816, 0.011497145023595754, 0.011275399971266163, 0.011155475330645856, 0.01132020553029248, 0.011419116065435893, 0.01129828296966807, 0.011290505518817093, 0.01056608651005389, 0.010943340748929492, 0.011280067725250295, 0.010877035972856443, 0.011454823821332815, 0.011064317111858905, 0.010941431840763315, 0.011448721009338967, 0.010812336656552651, 0.011427562269436474, 0.01102140988747911, 0.011424617466897831, 0.011236321784927387, 0.011575541654839358, 0.011402305310053821, 0.011312344884422931, 0.011384055373179913, 0.01099019241918307, 0.011107801243489479, 0.011016574689682881, 0.010810612356481479, 0.01174663474035872, 0.010851115647801444],
        "eval_previous": [0.08896154165267944, 0.09419530630111694, 0.08126145601272583, 0.06088286638259888, 0.08187553286552429, 0.17918282747268677, 0.06116771697998047, 0.07829952239990234, 0.06558066606521606, 0.07000168412923813, 0.10218538343906403, 0.06895051151514053, 0.074799083173275, 0.0661376565694809, 0.06290815770626068, 0.05549833923578262, 0.07926825433969498, 0.048828691244125366, 0.057863205671310425, 0.057143405079841614, 0.05966991186141968, 0.057391561567783356, 0.05024910718202591, 0.07110579311847687, 0.06357263028621674, 0.055347539484500885, 0.051644716411828995, 0.05168180540204048, 0.05733927711844444, 0.05357825383543968, 0.045761577785015106, 0.047207482159137726, 0.05410505831241608, 0.06169970706105232, 0.05429694801568985, 0.04593948274850845, 0.05202121287584305, 0.04920237883925438, 0.04893288016319275, 0.04858493059873581, 0.051036253571510315, 0.05213205888867378, 0.05161762982606888, 0.05895065516233444, 0.05047230049967766, 0.05217670276761055, 0.05220368504524231, 0.051187675446271896, 0.05257386714220047, 0.04787846654653549, 0.03961271792650223, 0.05816147103905678, 0.05209854990243912, 0.04762998968362808, 0.04819308966398239, 0.04771817475557327, 0.05253436416387558, 0.04929102212190628, 0.05324907600879669, 0.0502055399119854, 0.054067373275756836, 0.04114088416099548, 0.04826591908931732, 0.0479629710316658, 0.04833730310201645, 0.06122761219739914, 0.04807593673467636, 0.05451729893684387, 0.04032459855079651, 0.047872886061668396, 0.044995248317718506, 0.04869566857814789, 0.04452921450138092, 0.043485015630722046, 0.049904271960258484, 0.041117049753665924, 0.04111367464065552, 0.04561472684144974, 0.05315365642309189, 0.050785839557647705, 0.052651599049568176, 0.04778595268726349, 0.04489140212535858, 0.047328490763902664, 0.04912508279085159, 0.05351122096180916, 0.03637281805276871, 0.047212496399879456, 0.04932805150747299, 0.05491504445672035, 0.04282993823289871, 0.05971226096153259, 0.04459305852651596, 0.045629631727933884, 0.04256581887602806, 0.04820258915424347, 0.04813282936811447, 0.042610324919223785, 0.05003880709409714, 0.04407951235771179, 0.04750942811369896, 0.045320067554712296, 0.040696680545806885, 0.045076269656419754, 0.04604499787092209, 0.04268178343772888, 0.04353155195713043, 0.04560569301247597, 0.04701612889766693, 0.04986010491847992, 0.042332470417022705, 0.03935414180159569, 0.045993395149707794, 0.051086682826280594, 0.04603815823793411, 0.05249318107962608, 0.04408474266529083, 0.04261007905006409, 0.04537983238697052, 0.04598647356033325, 0.0468723326921463, 0.046217262744903564, 0.044577643275260925, 0.04663648456335068, 0.050431277602910995, 0.047403376549482346, 0.04349733889102936, 0.044720664620399475, 0.04451676458120346, 0.04723319783806801, 0.04157969355583191, 0.050434693694114685, 0.04177762567996979, 0.04575473070144653, 0.043981343507766724, 0.0437651090323925, 0.046817291527986526]
    },

    "debug": { // arguments in debug mode, which will replace arguments in train
        "val_epoch": 1,
        "save_checkpoint_epoch": 1,
        "log_iter": 2,
        "debug_split": 50 // percent or number, change the size of dataloder to debug_split.
    }
}
