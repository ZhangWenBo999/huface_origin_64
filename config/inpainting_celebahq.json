{
    "name": "inpainting_celebahq", // experiments name
    "gpu_ids": [0], // gpu ids list, default is single 0
    "seed" : -1, // random seed, seed <0 represents randomization not used 
    "finetune_norm": false, // find the parameters to optimize

    "path": { //set every part file path
        "base_dir": "experiments", // base path for all log except resume_state
        "code": "code", // code backup
        "tb_logger": "tb_logger", // path of tensorboard logger
        "results": "results",
        "checkpoint": "checkpoint",
        "resume_state": "/kaggle/input/o64-new-28000-49/49" 
        // "resume_state": null // ex: 100, loading .state  and .pth from given epoch and iteration
    },

    "datasets": { // train or test
        "train": { 
            "which_dataset": {  // import designated dataset using arguments 
                "name": ["data.dataset", "InpaintDataset"], // import Dataset() class / function(not recommend) from data.dataset.py (default is [data.dataset.py])
                "args":{ // arguments to initialize dataset
                    "data_root": "/kaggle/working/huface_origin_64/datasets/celebahq/flist/train_64_28000.flist",
                    "data_len": -1,
                    "mask_config": {
                        "mask_mode": "hybrid",
                        "phase": "train"
                    }
                }
            },
            "dataloader":{
                "validation_split": 2, // percent or number
                "args":{ // arguments to initialize train_dataloader
                    "batch_size": 5, // batch size in each gpu
                    "num_workers": 4,
                    "shuffle": true,
                    "pin_memory": true,
                    "drop_last": true
                },
                "val_args":{ // arguments to initialize valid_dataloader, will overwrite the parameters in train_dataloader
                    "batch_size": 1, // batch size in each gpu
                    "num_workers": 4,
                    "shuffle": false,
                    "pin_memory": true,
                    "drop_last": false
                }
            }
        },
        "test": {
            "which_dataset": {
                "name": "InpaintDataset", // import Dataset() class / function(not recommend) from default file
                "args":{
                    "data_root": "/kaggle/working/huface_origin_64/datasets/celebahq/flist/test_64_2000.flist",
                    "mask_config": {
                        "mask_mode": "center",
                        "phase": "test"
                    }
                }
            },
            "dataloader":{
                "args":{
                    "batch_size": 4,
                    "num_workers": 4,
                    "pin_memory": true
                }
            }
        }
    },

    "model": { // networks/metrics/losses/optimizers/lr_schedulers is a list and model is a dict
        "which_model": { // import designated  model(trainer) using arguments
            "name": ["models.model", "Palette"], // import Model() class / function(not recommend) from models.model.py (default is [models.model.py])
            "args": {
                "sample_num": 8, // process of each image
                "task": "inpainting",
                "ema_scheduler": {
                    "ema_start": 1,
                    "ema_iter": 1,
                    "ema_decay": 0.9999
                },
                "optimizers": [
                    { "lr": 5e-5, "weight_decay": 0}
                ]
            }
        }, 
        "which_networks": [ // import designated list of networks using arguments
            {
                "name": ["models.network", "Network"], // import Network() class / function(not recommend) from default file (default is [models/network.py]) 
                "args": { // arguments to initialize network
                    "init_type": "kaiming", // method can be [normal | xavier| xavier_uniform | kaiming | orthogonal], default is kaiming
                    "module_name": "guided_diffusion", // sr3 | guided_diffusion
                    "unet": {
                        "in_channel": 6,
                        "out_channel": 3,
                        "inner_channel": 64,
                        "channel_mults": [
                            1,
                            2,
                            4,
                            8
                        ],
                        "attn_res": [
                            // 32,
                            16
                            // 8
                        ],
                        "num_head_channels": 32,
                        "res_blocks": 2,
                        "dropout": 0.2,
                        "image_size": 64
                    },
                    "beta_schedule": {
                        "train": {
                            "schedule": "linear",
                            "n_timestep": 2000,
                            // "n_timestep": 10, // debug
                            "linear_start": 1e-6,
                            "linear_end": 0.01
                        },
                        "test": {
                            "schedule": "linear",
                            "n_timestep": 1000,
                            "linear_start": 1e-4,
                            "linear_end": 0.09
                        }
                    }
                }
            }
        ],
        "which_losses": [ // import designated list of losses without arguments
            "mse_loss" // import mse_loss() function/class from default file (default is [models/losses.py]), equivalent to { "name": "mse_loss", "args":{}}
        ],
        "which_metrics": [ // import designated list of metrics without arguments
            "mae" // import mae() function/class from default file (default is [models/metrics.py]), equivalent to { "name": "mae", "args":{}}
        ]
    },

    "train": { // arguments for basic training
        "n_epoch": 1000, // max epochs, not limited now
        "n_iter": 1e8, // max interations
        "val_epoch": 1, // valdation every specified number of epochs
        "save_checkpoint_epoch": 10,
        "log_iter": 1e3, // log every specified number of iterations
        "tensorboard" : false,  // tensorboardX enable
        "min_val_mae_loss": 0.031012920662760735,
        "min_val_flag": false,
        "train_previous": [0.06279709561694508, 0.026720031918947017, 0.021474320074939407, 0.0195228918028782, 0.017770337828761938, 0.016824107566344563, 0.0160873997678887, 0.015910636154354414, 0.015653143313351048, 0.01490590653861314, 0.014926083377877007, 0.014123534596872196, 0.014225582764644711, 0.014177473739449626, 0.013557338111965788, 0.014017027814393387, 0.013881406426137577, 0.013499376048611789, 0.01376633565140774, 0.012872787028317543, 0.013971166418041683, 0.013415376614856643, 0.013079788330409386, 0.013224892285758395, 0.013066967273803992, 0.013084726365349292, 0.012756920450390195, 0.012714367079452728, 0.013227155869075765, 0.0123995306266298, 0.012594704773506445, 0.01253016107473604, 0.012860726815366685, 0.012975287914237575, 0.012673623238253853, 0.012448889671206284, 0.0123079497418152, 0.01270141750393688, 0.01214354432794461, 0.012498015271102352, 0.012131316504755433, 0.011960165408315555, 0.012085471911288944, 0.011764551219745706, 0.012152545001724526, 0.012134925961603356, 0.012404410510133402, 0.012046193486135774, 0.012094904518634503],
        "eval_previous": [0.09348432719707489, 0.09209437668323517, 0.08793774247169495, 0.048253756016492844, 0.0887022465467453, 0.12445151805877686, 0.038415033370256424, 0.038482457399368286, 0.04496622085571289, 0.04083595424890518, 0.039313413202762604, 0.03774544596672058, 0.042075689882040024, 0.042113952338695526, 0.05162474513053894, 0.07212226092815399, 0.038562022149562836, 0.04358600825071335, 0.04044762998819351, 0.04495420306921005, 0.03988245874643326, 0.04197081923484802, 0.037005700170993805, 0.03870747983455658, 0.03389113396406174, 0.032963212579488754, 0.038339436054229736, 0.044259727001190186, 0.04267209395766258, 0.03885585814714432, 0.03857746720314026, 0.039079952985048294, 0.04160331189632416, 0.035397231578826904, 0.03659624233841896, 0.0369417667388916, 0.032938651740550995, 0.04064963757991791, 0.033233851194381714, 0.03838498517870903, 0.04242594912648201, 0.03822068125009537, 0.03637175261974335, 0.04982046037912369, 0.03479231894016266, 0.035871684551239014, 0.031012920662760735, 0.03764903545379639, 0.03751195967197418]
    },

    "debug": { // arguments in debug mode, which will replace arguments in train
        "val_epoch": 1,
        "save_checkpoint_epoch": 1,
        "log_iter": 2,
        "debug_split": 50 // percent or number, change the size of dataloder to debug_split.
    }
}
